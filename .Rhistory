summarize_all(.funs = c(mean="mean"))
View(s_means)
s_sds <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sds"))
s_sds <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
View(s_sds)
c_means = iso.data.clean2[17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
c_sds <- iso.data.clean2[17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
mix <- as.matrix(iso.data.clean2[,5:6])
colnames(mix) = c('d13C','d15N')
s_means <- iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
s_sds <- iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
c_means <- iso.data.clean2[17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
c_sds <- iso.data.clean2[17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
rm(c_means)
rm(c_sds)
conc <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
library(simmr)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
mix <- as.matrix(iso.data.clean2[,5:6])
class(mix)
colnames(mix) = c('d13C','d15N')
s_names <- as.vector(iso.data.clean2[3])
library(dplyr)
library(simmr)
mix <- as.matrix(iso.data.clean2[,5:6])
class(mix)
colnames(mix) = c('d13C','d15N')
s_names <- as.vector(iso.data.clean2[3])
s_names <- as.vector(iso.data.clean2[3])
class(s_names)
s_names <- as.vector(iso.data.clean2$ID)
class(s_names)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
s_names <- as.vector(iso.data.clean2[,c3]) %>%
group_by(ID)
s_names <- as.vector(iso.data.clean2[,3]) %>%
group_by(ID)
s_names <- as.vector(levels(iso.data.clean2[-17,3]))
s_names <- as.vector(levels(iso.data.clean2$ID))
levels(iso.data.clean2$ID))
levels(iso.data.clean2$ID)
levels(iso.data.clean2$ID)
unique(iso.data.clean2$ID)
s_sds[1]
s_names <- s_means[,1]
class(s_names)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
mix <- as.matrix(iso.data.clean2[-17,5:6])
class(mix)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
s_means <- as.matrix(iso.data.clean2[-17,c(5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- s_means[,2:3]
s_means <- as.numeric(s_means[,2:3])
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- as.numeric(s_means[,2:3])
mix <- as.matrix(iso.data.clean2[-17,c(3,5:6])
mix <- as.matrix(iso.data.clean2[-17,c(3,5:6)])
class(mix)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
library(dplyr)
library(simmr)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
class(s_means)
conc <- conc[,2:3]
s_sds <- s_sds[,2:3]
```{r}
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- s_means[,2:3]
class(s_means)
s_means2 <- apply(s_means,2,as.numeric)
s_sds2 <- apply(s_sds,2,as.numeric)
conc2 <- apply(conc,2,as.numeric)
mix <- mix[,2:3]
mix2 <- apply(mix,2,as.numeric)
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names2,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
View(iso.data.clean2)
s_sds
s_sds <- s_sds[c(1,5:7),2:3]
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds <- s_sds[c(1,5:7),2:3]
s_sds2 <- apply(s_sds,2,as.numeric)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[c(1,5:7),2:3]
conc2 <- apply(conc,2,as.numeric)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- s_means[c(1,5:7),2:3]
s_means2 <- apply(s_means,2,as.numeric)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[,2:3]
conc2 <- apply(conc,2,as.numeric)
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[c(1,5:7),2:3]
conc2 <- apply(conc,2,as.numeric)
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
s_names <- s_means[c(1,5:7),1]
s_names <- s_means[,1]
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means2 <- s_means[c(1,5:7),2:3]
s_names <- s_means[,1]
s_means2 <- apply(s_means,2,as.numeric)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means2 <- s_means[c(1,5:7),2:3]
s_means2 <- apply(s_means2,2,as.numeric)
s_names <- s_means[c(1,5:7),1]
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
mix <- as.matrix(iso.data.clean2[17,c(3,5:6)])
mix <- mix[,2:3]
mix2 <- apply(mix,2,as.numeric)
mix <- as.matrix(iso.data.clean2[c(1,17),c(3,5:6)])
mix <- mix[,2:3]
mix2 <- apply(mix,2,as.numeric)
simmr_in = simmr_load(mixtures=mix2,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
posterior_predictive(simmr_out)
prior_viz(simmr_out)
help(simmr)
compare_sources(simmr_out)
mix <- as.matrix(iso.data.clean2[c(17),c(5:6)])
colnames(mix) = c('d13C','d15N')
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
prior_viz(simmr_out)
compare_sources(simmr_out)
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
plot.simmr_input(simmr_in)
compare_sources(simmr_out)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means[1]
View(s_means)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means2 <- s_means[,2:3]
s_means2 <- apply(s_means2,2,as.numeric)
s_names <- s_means[,1]
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds <- s_sds[,2:3]
s_sds2 <- apply(s_sds,2,as.numeric)
s_sds2[is.na(s_sds2)] <- 0
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[,2:3]
conc2 <- apply(conc,2,as.numeric)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
compare_sources(simmr_out)
mix <- as.matrix(iso.data.clean2[c(1,17),c(5:6)])
rownames(mix) <- c("Leech", "Trout")
colnames(mix) = c('d13C','d15N')
colnames(mix) <- c("d13C", "d15N")
rownames(mix) <- c("Leech", "Trout")
s_means <- as.matrix(iso.data.clean2[c(-1,-17),c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means
s_sds <- as.matrix(iso.data.clean2[c(-1,-17),c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds
s_means2 <- s_means[c(1,4:6),2:3]
s_means2 <- apply(s_means2,2,as.numeric)
s_names <- s_means[c(1,4:6),1]
s_names <- s_means2[c(1,4:6),1]
s_names <- s_means[c(1,4:6),1]
s_sds <- as.matrix(iso.data.clean2[c(-1,-17),c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds <- s_sds[c(1,4:6),2:3]
s_sds2 <- apply(s_sds,2,as.numeric)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[c(1,4:6),2:3]
conc2 <- apply(conc,2,as.numeric)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
compare_sources(simmr_out)
mix <- as.matrix(iso.data.clean2[c(17),c(5:6)])
colnames(mix) <- c("d13C", "d15N")
mix <- as.matrix(iso.data.clean2[17,c(5:6)])
colnames(mix) <- c("d13C", "d15N")
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds
s_means2 <- s_means[c(1,5:7),2:3]
s_means2 <- apply(s_means2,2,as.numeric)
s_names <- s_means[c(1,5:7),1]
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
s_sds <- s_sds[c(1,5:7),2:3]
s_sds2 <- apply(s_sds,2,as.numeric)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[c(1,5:7),2:3]
conc2 <- apply(conc,2,as.numeric)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means2,
source_sds=s_sds2,
concentration_means = conc2)
plot(simmr_in,xlab=expression(paste(delta^13, "C (\u2030)",sep="")),
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of example data')
simmr_out = simmr_mcmc(simmr_in)
summary(simmr_out,type='diagnostics')
compare_sources(simmr_out)
write.csv(file="isodataclean2.csv", data=iso.data.clean2, row.names = FALSE)
write.csv(file="isodataclean2.csv", iso.data.clean2, row.names = FALSE)
install.packages(c("dplyr", "simmr"))
install.packages(c("dplyr", "simmr"))
install.packages(c("dplyr", "simmr"))
install.packages(c("dplyr", "simmr"))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("simmr")
install.packages(c("rlang", "dplyr", "simmr"))
install.packages(c("rlang", "dplyr", "simmr"))
library(rlang)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(simmr)
iso.data.clean2 <- read.csv("isodataclean2.csv", header=TRUE)
trout.mix <- as.matrix(iso.data.clean2[17,c(5:6)])
colnames(trout.mix) <- c("d13C", "d15N")
class(trout.mix)
# View the help file for the simmr package:
help("simmr")
??simmr
vingette
simmr::simmr
View(trout.mix)
# (1pt)
class(trout.mix)
# (1pt)
str(trout.mix)
# (1pt)
trout.mix
view(iso.data.clean2)
View(iso.data.clean2)
View(iso.data.clean2)
View(iso.data.clean2)
#(1pt) On the line below, call row 12, all columns of the iso.data.clean2 dataset, without assigning it to an object
iso.data.clean2[12,]
#(1pt) On the line below, call row 12, all columns of the iso.data.clean2 dataset, without assigning it to an object
iso.data.clean2[12,]
# Set the column names
# Note that the c on the right side of the arrow means "combine" and is used to tell R you are giving it multiple pieces of information.
colnames(trout.mix) <- c("d13C", "d15N")
# (1pt) trout.mix is a small matrix. Call it by name on the line below to look at the data.
trout.mix
# Because we have wrapped everything above in the as.matrix() function, source.means is a matrix.
# (1pt) Check that this step worked by asking R for the class of the source.means object on the line below:
class(source.means)
# The first line is creating an object called source.means, to which we assign the output. We start by dropping the trout row (row 17), and taking the ID column (3), d13C colun (5), and d15N column (6) for the rest of the rows.
source.means <- as.matrix(iso.data.clean2[-17, c(3,5:6)] %>%
group_by(ID) %>% # This line then groups the data by ID
summarize_all(.funs = c(mean="mean"))) # This line then calculates the mean d15C and d15N by group
# Because we have wrapped everything above in the as.matrix() function, source.means is a matrix.
# (1pt) Check that this step worked by asking R for the class of the source.means object on the line below:
class(source.means)
unique(iso.data.clean2$ID)
!unique(iso.data.clean2$ID)
source.means[2]
source.means[3]
source.means[4]
source.means[8]
# Some of our IDs have only one observation. We can't create a meaningful average for those, so we have to remove them. We have only one observation each for Amphipods (row 2), Caddisflies (row 3), Leeches (row 4), and Wood (row 8).
# We also need to drop the ID column that we had used for grouping
source.means2 <- source.means[c(1,5:7), -1]
# Convert the data to numeric form using the line below:
source.means3 <- apply(source.means2, 2, as.numeric)
dim(source.means3)
source.names <- source.means[c(1,5:7), 1]
source.names
source.sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
source.sds <- source.sds[c(1, 5:7), 2:3]
source.sds <- as.matrix(iso.data.clean2[-17, c(3, 5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
source.sds <- source.sds[c(1, 5:7), 2:3]
# (3pts) On the line below, write an explanation in your own words of what the code on line 165 is doing.
#
source.sds2 <- apply(source.sds, 2 ,as.numeric)
conc <- as.matrix(iso.data.clean2[-17, c(3, 7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc <- conc[c(1, 5:7), 2:3]
conc2 <- apply(conc, 2, as.numeric)
dim(conc)
# (2pts) On the line below, use the command dim(name) to find out what the dimensions of conc2 are
dim(conc2)
trout.simmr.in = simmr_load(mixtures=trout.mix,
source_names=source.names,
source_means=source.means2,
source_sds=source.sds2,
concentration_means = conc2)
# (1pt) What is the class of trout.simmr.in? Write the command to find the class on the line below and execute the code.
class(trout.simmr.in)
# You can use expressions to include symbols in plots.
plot(trout.simmr.in, xlab=expression(paste(delta^13, "C (\u2030)",sep="")), # \u2030 is the unicode for the permil symbol
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of potential trout food sources')
source.sds <- as.matrix(iso.data.clean2[-17, c(3, 5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
# (3pts) On the line below, write an explanation in your own words of what the code on line 154 is doing. Remember that you can refer to the means step for help.
#
# (3pts) On the line below, write an explanation in your own words of what the code on line 155 is doing.
#
# (3pts) On the line below, write an explanation in your own words of what the code on line 156 is doing.
#
source.sds2 <- source.sds[c(1, 5:7), 2:3]
# (3pts) On the line below, write an explanation in your own words of what the code on line 165 is doing.
#
source.sds3 <- apply(source.sds, 2 ,as.numeric)
source.sds <- as.matrix(iso.data.clean2[-17, c(3, 5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
# (3pts) On the line below, write an explanation in your own words of what the code on line 154 is doing. Remember that you can refer to the means step for help.
#
# (3pts) On the line below, write an explanation in your own words of what the code on line 155 is doing.
#
# (3pts) On the line below, write an explanation in your own words of what the code on line 156 is doing.
#
source.sds2 <- source.sds[c(1, 5:7), 2:3]
# (3pts) On the line below, write an explanation in your own words of what the code on line 165 is doing.
#
source.sds3 <- apply(source.sds2, 2 ,as.numeric)
conc <- as.matrix(iso.data.clean2[-17, c(3, 7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
conc2 <- conc[c(1, 5:7), 2:3]
conc3 <- apply(conc2, 2, as.numeric)
# (2pts) On the line below, use the command dim(name) to find out what the dimensions of conc3 are
dim(conc3)
trout.simmr.in = simmr_load(mixtures=trout.mix,
source_names=source.names,
source_means=source.means3,
source_sds=source.sds3,
concentration_means = conc3)
# (1pt) What is the class of trout.simmr.in? Write the command to find the class on the line below and execute the code.
class(trout.simmr.in)
# You can use expressions to include symbols in plots.
plot(trout.simmr.in, xlab=expression(paste(delta^13, "C (\u2030)",sep="")), # \u2030 is the unicode for the permil symbol
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title='Isospace plot of potential trout food sources')
# You can use expressions to include symbols in plots. Delta can be called by name in an expression, and ^ indicates that what comes next should be superscript. Note the placement of the quotation marks - these are key for getting the labels to work.
plot(trout.simmr.in, xlab=expression(paste(delta^13, "C (\u2030)",sep="")), # \u2030 is the unicode for the permil symbol
ylab=expression(paste(delta^15, "N (\u2030)",sep="")),
title="Isospace plot of potential trout food sources")
trout.simmr.out = simmr_mcmc(trout.simmr.in)
summary(trout.simmr.out,type='diagnostics')
# This command creates a box and whisker plot of the potential food sources
compare_sources(trout.simmr.out)
View(iso.data.clean2)
