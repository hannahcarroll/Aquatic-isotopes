if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <-
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
??nstart
??kmeans
fitted(k2)
fitted(k2, method="classes")
data(USArrests)
res.dist <- get_dist(USArrests, stand = TRUE, method = "pearson")
fviz_dist(res.dist,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
class(USArrests)
###########33
aq.scaled2 <- scale(aquatic[,c(7:8)])
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
aquatic <- read_excel("2019_EA_Houston_class project.xlsx")
###########33
aq.scaled2 <- scale(aquatic[,c(7:8)])
rownames(aq.scaled2) <- aquatic$Trophic
distance <- get_dist(aq.scaled2)
remove(distance)
distance2 <- get_dist(aq.scaled2)
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_cluster(k2, data = aq.scaled, ggtitle="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"), ggtitle="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"), title="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
??fviz_dist
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
ggsave(file="sampledistanceplot.png", dpi=400)
c2 <- kmeans(aq.scaled2, centers = 2, nstart = 25)
fviz_cluster(c2, data = aq.scaled)
fviz_cluster(c2, data = aq.scaled2)
ggsave(file="sampleclusterplot.png", dpi=400)
ggsave(file="sampleclusterplot.png", dpi=400, scale=1.5)
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
# Students should use two different cluster numbers and include both code and output.
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
Sys.Date()
Sys.Time()
Sys.time()
# This command returns the time and date
Sys.time()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() + theme_bw() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position",
breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore", "HerbivoreDetritivore", "Primary Producer", "Detritus"))
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() + theme_bw() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position",
breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore", "HerbivoreDetritivore", "Primary Producer", "Detritus"))
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() + theme_bw() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position",
breaks=c("Apex", "Secondary Consumer", "Herbivore", "Detritivore", "HerbivoreDetritivore", "Primary Producer", "Detritus"))
# This command returns the time and date
Sys.time()
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() + theme_bw() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position",
breaks=c("Apex", "Secondary Consumer", "Herbivore", "Detritivore", "HerbivoreDetritivore", "Primary Producer", "Detritus"))
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
# The comma after 40 tells R that you want to keep all of the columns.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() + theme_bw() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position",
breaks=c("Apex", "Secondary Consumer", "Herbivore", "Detritivore", "HerbivoreDetritivore", "Primary Producer", "Detritus"))
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked the kmeans function to choose 25 random sets of centers and select the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
# Students should use two different cluster numbers and include both code and output.
install.packages("isoweb")
mix <- matrix(iso.data.clean2[7:8])
View(mix)
mix <- matrix(iso.data.clean2[,7:8])
mix <- iso.data.clean2[,7:8]
as.matrix(mix)
mix <- as.matrix(mix)
class(mix)
colnames(mix) = c('d13C','d15N')
s_names <- iso.data.clean2[3]
mix <- as.matrix(iso.data.clean2[,7:8])
class(mix)
View(iso.data.clean2)
s_means <- iso.data.clean2[,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
library(dplyr)
s_means <- iso.data.clean2[,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
View(s_means)
View(iso.data.clean2)
s_means <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
View(s_means)
s_sds <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sds"))
s_sds <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
View(s_sds)
c_means = iso.data.clean2[17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
c_sds <- iso.data.clean2[17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
mix <- as.matrix(iso.data.clean2[,5:6])
colnames(mix) = c('d13C','d15N')
s_means <- iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
s_sds <- iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
c_means <- iso.data.clean2[17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
c_sds <- iso.data.clean2[17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd"))
rm(c_means)
rm(c_sds)
conc <- iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean"))
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
library(simmr)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
mix <- as.matrix(iso.data.clean2[,5:6])
class(mix)
colnames(mix) = c('d13C','d15N')
s_names <- as.vector(iso.data.clean2[3])
library(dplyr)
library(simmr)
mix <- as.matrix(iso.data.clean2[,5:6])
class(mix)
colnames(mix) = c('d13C','d15N')
s_names <- as.vector(iso.data.clean2[3])
s_names <- as.vector(iso.data.clean2[3])
class(s_names)
s_names <- as.vector(iso.data.clean2$ID)
class(s_names)
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_sds <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(sd="sd")))
conc <- as.matrix(iso.data.clean2[-17,c(3,7:8)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
s_names <- as.vector(iso.data.clean2[,c3]) %>%
group_by(ID)
s_names <- as.vector(iso.data.clean2[,3]) %>%
group_by(ID)
s_names <- as.vector(levels(iso.data.clean2[-17,3]))
s_names <- as.vector(levels(iso.data.clean2$ID))
levels(iso.data.clean2$ID))
levels(iso.data.clean2$ID)
levels(iso.data.clean2$ID)
unique(iso.data.clean2$ID)
s_sds[1]
s_names <- s_means[,1]
class(s_names)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
mix <- as.matrix(iso.data.clean2[-17,5:6])
class(mix)
simmr_in = simmr_load(mixtures=mix,
source_names=s_names,
source_means=s_means,
source_sds=s_sds,
concentration_means = conc)
s_means <- as.matrix(iso.data.clean2[-17,c(5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- s_means[,2:3]
s_means <- as.numeric(s_means[,2:3])
s_means <- as.matrix(iso.data.clean2[-17,c(3,5:6)] %>%
group_by(ID) %>%
summarize_all(.funs = c(mean="mean")))
s_means <- as.numeric(s_means[,2:3])
