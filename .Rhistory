# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition") # Make a list of required packages
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=Trophic), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
ylim(c(6,12.5)) + scale_color_viridis_d(end=0.9) + theme_bw() + coord_equal()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=Trophic), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(end=0.9, name="Trophic Position") + theme_bw() + coord_equal()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=Trophic), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(end=0.9, name="Trophic Position") + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, vjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(end=0.9, name="Trophic Position") + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(end=0.9, name="Trophic Position") + theme_bw()
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_manual(name="Trophic Position") + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05)
aquatic <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(aquatic, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=Trophic), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
ylim(c(6,12.5)) + scale_color_viridis_d(end=0.9) + theme_bw() + coord_equal()
aq.scaled <- scale(aquatic[,c(5:6)])
rownames(aq.scaled) <- aquatic$Trophic
head(aq.scaled)
distance <- get_dist(aq.scaled)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k2 <- kmeans(aq.scaled, centers = 4, nstart = 25)
fviz_cluster(k2, data = aq.scaled)
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
#
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
getwd()
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
#
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
getwd()
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
aquatic <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(aquatic, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=Trophic), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) +
ylim(c(6,12.5)) + scale_color_viridis_d(end=0.9) + theme_bw() + coord_equal()
aq.scaled <- scale(aquatic[,c(5:6)])
rownames(aq.scaled) <- aquatic$Trophic
distance <- get_dist(aq.scaled)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k2 <- kmeans(aq.scaled, centers = 4, nstart = 25)
fviz_cluster(k2, data = aq.scaled)
k2 <- kmeans(aq.scaled, centers = 6, nstart = 25)
fviz_cluster(k2, data = aq.scaled)
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-17,-30) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-17,-30) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
summary(isotope.data)
summary(isotope.data$`corrected d13C (VPDB)`)
hist(isotope.data$`corrected d13C (VPDB)`)
hist(isotope.data$`corrected d15N (Air)`)
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40]
iso.data.clean <- isotope.data[,isotope.data$`corrected d15N (Air)` < 40]
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
hist(iso.data.clean$`corrected d15N (Air)`)
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
ggplot(data=iso.data.clean, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
max(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- iso.data.clean[iso.data.clean$`corrected d15N (Air)` < 18,]
iso.data.clean2 <-
# Answer: iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
hist(iso.data.clean2)
iso.data.clean2 <-
# Answer: iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
hist(iso.data.clean2$`corrected d15N (Air)`)
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
iso.data.clean2 <-
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
rownames(iso.scaled)
head(aq.scaled)
class(iso.scaled)
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2
class(iso.data.clean2)
class(iso.scaled)
distance <- get_dist(iso.scaled)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with three clusters (centers=3) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
k3 <- kmeans(iso.scaled, centers = 3, nstart = 25)
fviz_cluster(k3, data = iso.scaled)
IsoList <- extractIsotopeData(iso.data.clean2,
groupsColumn = "Trophic",
d13C = "d13C", d15N = "d15N")
IsoList <- extractIsotopeData(iso.data.clean2,
groupsColumn = "Trophic",
d13C = "`corrected d13C (VPDB)`", d15N = "`corrected d15N (Air)`")
IsoList <- extractIsotopeData(Bilagay, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Trophic", consumersColumn = "ID",
d13C = "`corrected d13C (VPDB)`", d15N = "`corrected d15N (Air)`")
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Trophic", consumersColumn = "ID",
d13C = "`corrected d13C (VPDB)`", d15N = "`corrected d15N (Air)`")
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Trophic", consumersColumn = "ID",
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Identifier", consumersColumn = "ID", community="Trophic"
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Identifier", consumersColumn = "ID", community="Trophic",
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
for (community in IsoList) {
print(summary(community))
plot(community)
}
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Identifier", consumersColumn = "ID", groupsColumn = "Trophic",
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
for (community in IsoList) {
print(summary(community))
plot(community)
}
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Trophic", consumersColumn = "ID", groupsColumn = "Trophic",
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
IsoList <- extractIsotopeData(iso.data.clean2, b1 = "Primary Producer", b2 = "Detritus",
baselineColumn = "Trophic", consumersColumn = "ID",
d13C = "corrected d13C (VPDB)", d15N = "corrected d15N (Air)")
for (community in IsoList) {
print(summary(community))
plot(community)
}
screenFoodWeb(iso.data.clean2)
screenFoodWeb(iso.data.clean2, grouping="Trophic")
iso.data.clean3 <- iso.data.clean2
names(iso.data.clean3) <- c("Sample", "Identifier", "ID", "Trophic", "d13C", "d15N", "C%", "N%")
screenFoodWeb(iso.data.clean2, grouping="Trophic")
names(iso.data.clean3) <- c("Sample", "Identifier", "ID", "Trophic", "d13C", "d15N", "C%", "N%")
screenFoodWeb(iso.data.clean3, grouping="Trophic")
screenFoodWeb(iso.data.clean3, grouping="ID")
k3 <- kmeans(iso.scaled, centers = 4, nstart = 25)
fviz_cluster(k4, data = iso.scaled)
fviz_cluster(k3, data = iso.scaled)
k3 <- kmeans(iso.scaled, centers = 5, nstart = 25)
fviz_cluster(k3, data = iso.scaled)
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
hist(isotope.data$`corrected d15N (Air)`)
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <-
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
hist(iso.data.clean2$`corrected d15N (Air)`)
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.05) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
class(iso.scaled)
class(iso.scaled)
distance <- get_dist(iso.scaled)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
install.packages("simmr")
library(vignette('simmr'))
library(simmr)
install.packages("rjags")
library(simmr)
library(simmr)
vignette('simmr')
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.1) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.5) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=-0.09, ymax=0.09)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=-0.09, ymax=0.09)) + geom_errorbarh(aes(xmin=0.11, xmax=-0.11)) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) + geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <-
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Sets the working directory to the folder in which this document is located
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
# Set your working directory by choosing Session from the menu at the top, then Set Working Directory -> To Source File Location
# (1pt) Write the command getwd() on the line below and run it to find out what your working directory is.
getwd()
packages <- c("readxl", "ggplot2", "cluster", "factoextra", "tRophicPosition", "viridis") # Make a list of required packages
# (1pt) How many packages are in our list?
# 6
new.packages <- packages[!(packages %in% installed.packages()[,"Package"])] # Which ones haven't been installed yet?
# (1pt) What new packages are we installing?
# This will vary. Probably 3-5.
if(length(new.packages)) install.packages(new.packages) # Install any that are missing
lapply(packages, library, character.only = TRUE) # Load packages into memory for use
isotope.data <- read_excel("2019_EA_Houston_class project.xlsx")
# The dataset should now appear in your global environment (top right)
# (1pt) How many observations are there?
# 19
# (1pt) How many variables are there?
# 8
ggplot(data=isotope.data, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
hist(isotope.data$`corrected d13C (VPDB)`)
# (1pt) Describe the distribution of our d13C data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
hist(isotope.data$`corrected d15N (Air)`)
# (1pt) Describe the distribution of our d15N data. Are they right skewed, left skewed, bimodal, or normally distributed?
# Right skewed
# The command below creates a new dataset by taking our original data and keeping only those rows where the value of d15N is less than 40.
iso.data.clean <- isotope.data[isotope.data$`corrected d15N (Air)` < 40,]
# (1pt) Why was this chosen as the cutoff point?
# There is a big gap in the data and this looks an outlier.
# (1pt) How many observations does our new dataset contain?
# 18
# (1pt) How many variables?
# 8
# Now we plot the cleaned data:
hist(iso.data.clean$`corrected d15N (Air)`)
iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# iso.data.clean2 <- isotope.data[isotope.data$`corrected d15N (Air)` < 18,]
# Now plot the histogram:
hist(iso.data.clean2$`corrected d15N (Air)`)
# (1pt) What kind of distribution do we have now? Is it right skewed, left skewed, bimodal, or normal?
# Normal
ggplot(data=iso.data.clean2, aes(x=`corrected d13C (VPDB)`, y=`corrected d15N (Air)`, color=Trophic)) +
geom_errorbar(aes(ymin=(`corrected d15N (Air)`-0.09), ymax=(`corrected d15N (Air)`+0.09))) +
geom_errorbarh(aes(xmin=(`corrected d13C (VPDB)`-0.11), xmax=(`corrected d13C (VPDB)`+0.11))) +
geom_point() +
geom_text(aes(label=ID, hjust=0.5), check_overlap = FALSE, hjust = 0, nudge_x = 0.2) + xlim(-30,-17) +
scale_color_viridis_d(name="Trophic Position", breaks=c("Apex", "Sec Consumer", "Herbivore", "Detritivore",
"HerbivoreDetritivore", "Primary Producer", "Detritus")) + theme_bw()
# This line scales the data so that they're comparable
iso.scaled <- scale(iso.data.clean2[,c(5:6)])
# We set the rownames to be the trophic level we think each sample belongs to.
rownames(iso.scaled) <- iso.data.clean2$Trophic
# You can find out the class of any object in your environment using the command class(name.of.object)
# For example, the command class(iso.data.clean2) tells us that iso.data.clean2 is a data frame.
# (1pt) On the line below, write the command to find the class of iso.scaled and run it.
class(iso.scaled)
distance <- get_dist(iso.scaled)
# Next, we plot the distances on a pairwise matrix
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
# We have begun with two clusters (centers=2) and asked it to run 25 simulations of our data and find the best fit (nstart=25)
# We've called it k2 to remind ourselves that we picked 2 clusters.
k2 <- kmeans(iso.scaled, centers = 2, nstart = 25)
fviz_cluster(k2, data = iso.scaled)
??nstart
??kmeans
fitted(k2)
fitted(k2, method="classes")
data(USArrests)
res.dist <- get_dist(USArrests, stand = TRUE, method = "pearson")
fviz_dist(res.dist,
gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
class(USArrests)
###########33
aq.scaled2 <- scale(aquatic[,c(7:8)])
setwd("~/Research/For Derek/Derek teaching/Aquatic isotopes")
aquatic <- read_excel("2019_EA_Houston_class project.xlsx")
###########33
aq.scaled2 <- scale(aquatic[,c(7:8)])
rownames(aq.scaled2) <- aquatic$Trophic
distance <- get_dist(aq.scaled2)
remove(distance)
distance2 <- get_dist(aq.scaled2)
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
fviz_cluster(k2, data = aq.scaled, ggtitle="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"), ggtitle="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"), title="Hypothetical Distance Plot")
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
??fviz_dist
fviz_dist(distance2, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
ggsave(file="sampledistanceplot.png", dpi=400)
c2 <- kmeans(aq.scaled2, centers = 2, nstart = 25)
fviz_cluster(c2, data = aq.scaled)
fviz_cluster(c2, data = aq.scaled2)
ggsave(file="sampleclusterplot.png", dpi=400)
ggsave(file="sampleclusterplot.png", dpi=400, scale=1.5)
